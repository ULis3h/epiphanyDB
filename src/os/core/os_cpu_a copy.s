;*******************************************************************************
;   语法.
; EQU: 给数字常量取一个符号名,相当与C语言的define.
; AREA: 汇编一个新的代码段或者数据段.
; SPACE: 分配内存空间.
; PRESERVE8: 当前文件栈需按照8字节对齐.
; EXPORT: 声明一个标号具有全局属性,可被外部的文件使用.
; DCD: 以字为单位分配内存,要求4字节对其,并要按照要求初始化这些内存.
; PROC: 定义子程序,与ENDP成对使用,表示子程序结束.
; WEAK: 弱定义,如果外部文件声明了一个标号,则优先使用外部文件定义的标号,如果外部文件没有定义也
; 不出错. 需要注意的是:这个不是ARM的指令,是编译器的.
; IMPORT: 声明标号来自外部文件,跟C语言中的EXTERN关键字类似.
; B: 跳转到一个标号.
; ALIGN: 编译器对指令或者数据的存放位置进行对齐,一般需要跟一个立即数,缺省表示4字节对其,需要
; 注意的是:这个不是ARM的指令, 是编译器的.
; END: 到达文件末尾, 文件结束.
; IF,ELSE,ENDIF: 汇编条件分支语句, 跟C语言的if else类似.
;*******************************************************************************



;*******************************************************************************
;   常量.
NVIC_INIT_CTRL EQU 0xE000ED04 ; 中断控制及状态寄存器 SCB_ICSR
NVIC_SYSPRI14 EQU 0xE000ED22 ; 系统优先级寄存器 SCB_SHPR3
NVIC_PENDSV_PRI EQU 0xff ; PendSV优先级的值. 低于所有的外部中断和其他的系统异常.
NVIC_PENDSVSET EQU 0x10000000 ; 出发PendSV异常的值.

;*******************************************************************************



;*******************************************************************************
;   开始第一次上下文切换.
; 1. 配置PendSV异常的优先级为最低.
; 2. 在开始第一次上下文切换之前,设置psp = 0.
; 3. 触发PendSV异常, 开始上下文切换.
;*******************************************************************************
OSStartHighRdy
LDR R0, = NVIC_SYSPRI14 ; 设置PendSV异常优先级为最低.
LDR R1l, = NVIC_PENDSV_PRI
STRB R1, [R0]

MOVS R0, #0 ; 设置psp的值为0, 开始第一次上下文切换.
MSR PSP, R0

LDR R0, = NVIC_INIT_CTRL ; 触发PendSV异常.
LDR R1, = NVIC_PENDSVSET
STR R1, [R0]

CPSIE I ; 启用总中断, NMI和HardFault除外

OSStartHang
B OSStartHang ; 程序永远不会运行到这里.
